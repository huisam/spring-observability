services:
  order-application:
    image: order-application:0.0.1-SNAPSHOT
    container_name: order-application
    environment:
      OTEL_SERVICE_NAME: "order-application"
      OTEL_RESOURCE_ATTRIBUTES: "service=order-application,env=dev"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://collector:4317"
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_INSTRUMENTATION_MICROMETER_ENABLED: true
    ports:
      - "8080:8080"
    depends_on:
      - postgres-order
      - collector

  product-application:
    image: product-application:0.0.1-SNAPSHOT
    container_name: product-application
    environment:
      OTEL_SERVICE_NAME: "product-application"
      OTEL_RESOURCE_ATTRIBUTES: "service=product-application,env=dev"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://collector:4317"
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_INSTRUMENTATION_MICROMETER_ENABLED: true
    ports:
      - "8081:8080"
    depends_on:
      - postgres-product
      - collector

  collector:
    container_name: collector
    image: otel/opentelemetry-collector-contrib:0.105.0
    command:
      - --config=/etc/otelcol-contrib/otel-collector.yml
    volumes:
      - ./docker/collector/otel-collector.yml:/etc/otelcol-contrib/otel-collector.yml
    restart: always
    ports:
      - 4317:4317 # OTLP gRPC receiver
      - 4318:4318 # OTLP HTTP receiver
      - 8888:8888 # Prometheus metrics exposed by the Collector
      - 8889:8889 # Prometheus exporter metrics
    depends_on:
      - loki
      - tempo

  tempo:
    container_name: tempo
    image: grafana/tempo:latest
    command: [ "-config.file=/etc/tempo.yml" ]
    volumes:
      - ./docker/tempo/tempo.yml:/etc/tempo.yml
    restart: always
    ports:
      - "4317"  # otlp grpc
      - "3200"  # tempo as grafana datasource

  loki:
    container_name: loki
    image: grafana/loki:latest
    command: -config.file=/etc/loki/local-config.yaml
    restart: always
    ports:
      - "3100"

  prometheus:
    container_name: prometheus
    image: prom/prometheus
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --enable-feature=exemplar-storage
      - --web.enable-remote-write-receiver
    restart: always
    ports:
      - '9090:9090'
    depends_on:
      - collector

  grafana:
    container_name: grafana
    image: grafana/grafana
    volumes:
      - ./docker/grafana/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    restart: always
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
      - loki
      - tempo

  postgres-order:
    container_name: postgres-order
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_DB: order
      POSTGRES_USER: username
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"

  postgres-product:
    container_name: postgres-product
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_DB: product
      POSTGRES_USER: username
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"

  locust-master:
    image: locustio/locust
    ports:
      - "8089:8089"
    volumes:
      - ./locust/:/mnt/locust
    command: -f /mnt/locust/locustfile.py --master

  locust-worker:
    image: locustio/locust
    volumes:
      - ./locust/:/mnt/locust
    command: -f /mnt/locust/locustfile.py --worker --master-host locust-master